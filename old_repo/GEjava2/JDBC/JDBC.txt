JDBC(JAVA DataBase Connectivity)
 - JAVA와 DataBase의 연동을 위한 프로그래밍 API
 - java.sql 패키지 안에 정의가 되어 있다...
 - Java프로그램에서 DB를 연동할때 DBMS의 종류와 상관없이 통합적으로
   처리하기 위해서 만들어졌다..

JDBC프로그래밍 순서
 1. JDBC드라이버 로딩
 2. 연결관리할수 있는 객체 생성 - Connection
 3. 쿼리 실행을 위한 객체 생성 - PreparedStatement
 4. 쿼리 실행
 5. 결과 사용 - select - ResultSet , insert delete update - int
 6. ResultSet 종료
 7. PreparedStatement 종료
 8. Connection 종료

================================================================================

1. JDBC 드라이버 로딩
 - DBMS마다 별도의 드라이버가 필요하다...
 - 일반적으로 JAR파일 형태로 DBMS마다 기본적으로 제공한다...
 - 드라이버 위치
  - 11G
   - C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib\ojdbc6.jar
  - 18C
   - C:\app\윈도우계정명\product\18.0.0\dbhomeXE\jdbc\lib\ojdbc8.jar

 - 빌드패스를 통하여 프로젝트에 추가시켜주면 된다...
 - Class.forName("JDBC드라이버 클래스의 완전한 이름");
 - 주요 DBMS JDBC드라이버 클래스 ...
  - oracle - oracle.jdbc.driver.OracleDriver - 없애는중...
	   - oracle.jdbc.OracleDriver
  - MySQL - com.mysql.jdbc.Driver
  - MS-SQL - com.microsoft.sqlserver.jdbc.SQLServerDriver

--------------------------------------------------------------------

2. 연결 관리를 할수 있는 객체 생성 - Connection
 - java.sql.Connection - interface
  - JAVA에서는 자주 사용되는 interface 같은 경우에는 객체 생성을 해서 반환해주는
    메소드가 존재한다...
  - java.sql.DriverManager 클래스 안에 getConnection이라는 메소드를 통해서 객체 생성을 해서 반환한다..
  
  - getConnection의 매개변수
   - String url
    - url - 어떤 데이터의 정보와 위치를 저장하고 있는 데이터
    - DB의 위치와 정보를 담고 있는 데이터
    - 형식
     - jdbc:DBMS명:데이터베이스식별자(HOST,PORT,SID.....)
     - jdbc:oracle:드라이버종류:@HOST:PORT:SID 
      - jdbc:oracle:thin:@localhost:1521:xe
      
      - 드라이버 종류
       - OCI - 별도의 모듈을 이용한 드라이버
       - thin - Jar파일로된 드라이버
   - String user	 - 접속할 계정의 아이디
   - String password - 접속할 계정의 패스워드

===================================================================

create table dbtest(
name    	varchar2(15),
age       	number,  	   
height    	number(10,2),   
logtime   date); 

===================================================================

3. 쿼리 실행을 위한 객체 생성 - PreparedStatement

 - java.sql.Statement
  - 정적쿼리 방식
  - 쿼리 실행마다 JVM에게 쿼리를 넘겨주어야 한다...
  - 넘어가는 데이터가 보인다...보안에 문제가 있다...
	select * from testmember where name = ' + name + ';
	
 - java.sql.PreparedStatement - 웹모듈 3.0버전 이상부터 권장방식
  - 동적쿼리 방식
  - 객체 생성할때 한번만 JVM에게 쿼리를 넘겨주면 된다...
  - 필요한 데이터를 JVM에게 넘겨주는 방식
	select * from testmember where name = ?


	select * from testmember where name='김민준';

===================================================================

4. 쿼리 실행


 - 쿼리 실행을 위한 메소드
boolean	execute() - X
 - ResultSet타입이면 True 아니면  False를 반환 

long	executeLargeUpdate() - X
 - insert , delete , update
 - 대량의 데이터를 이용할때 사용된다....

ResultSet	executeQuery()
 - select 문에서 실행 결과를 받을때 사용하는 메소드...

int	executeUpdate()
 - insert , delete, update 문에서 실행 결과를 받을때 사용하는 메소드.. 









































