객체 지향 프로그래밍(OOP : Object Oriented Programming)
 - 객체 중심의 프로그래밍 방식
 - 객체끼리의 상호 작용을 통하여 프로그램을 작성하는 방식...
 
 - 부품화
 - 캡슐화 == 클래스
   - 속성과 기능을 하나의 캡슐처럼 묶어서 정의한것...
 - 정보은닉
  - 클래스의 멤버를 보호하기위해서 외부로부터 접근을 제한하는것을 말한다...
  - 프로그램의 안정적 구현과 연관이 있다...
 - 상속성
  - 클래스 끼리 물려주거나 물려받는것을 말한다....
 - 다형성 
  - 다양한 형태나 성질..
  - 하나의 클래스 객체를 여러개의 클래스로 표현하는것...
 
객체(Object)
 - 사전적인 의미로는 현실세계에 존재하는 모든것...하나의 완벽한 대상체....
 - 프로그램에서의 객체는 어떠한 대상을 표현하기위한 정보(속성)와 그 대상을 컨트롤할수 있는 기능(메소드)을
   하나의 루틴으로 묶은 개별적인 개체로	표현되는 변수..
 - 클래스(class)라는 사용자 정의 자료형을 통하여 만들어지는 변수.,..
 
클래스
 -어떠한 대상을 표현하기위한 정보(속성)와 그 대상을 컨트롤할수 있는 기능을
   하나의 블록으로 묶어 정의한 사용자 정의 자료형..
 
 - 형식
  - 기본형식
   - Data + Function + 보안(정보은닉)
   - 멤버변수 + 멤버메소드 + 접근지정자 = Class
   
  - 세부 정의 형식
     class 클래스명 {
     	1.멤버변수 - 변수 선언하듯이 정의하면 된다...
     	2.멤버 메소드 - 클래스의 기능
     	 - 메소드 - 클래스 내부의 함수를 메소드라고 부른다...
     	 
     	 - 생성자 - 객체 생성시 단 한번만 호출되는 메소드 - 객체 초기설정....
     	 - getter - 멤버변수의 값을 반환 받는 메소드
     	 - setter - 멤버변수의 값을 셋팅하는 메소드
     	 - user 메소드 - 사용자 필요에 의해 만드는 메소드
		3. 중첩클래스 - 나중에....
		
     }
   
====================================================================================

접근지정자(접근제한자)
 - 클래스의 멤버의 접근 범위를 지정할수 있는 키워드
 - 정보은닉과 관련 있다....
 - 멤버 마다 앞부분에 적어서 정의 한다..
 
 - 종류
  - private
   - 클래스 내부에서만 접근 가능...그외의 외부에서는 모두 접근 불가...비공개
   - 별다른 제약이 없으면 멤버 변수는 private으로 설정한다...
  - protected
   - 자식클래스에서는 접근 가능....그외의 외부에서는 접근 불가...
   - JAVA에서는 같은 패키지에서는 접근 가능..
      다른 패키지에서는 상속을 통한 접근만 가능하다...
  - package(default)
   - 우리가 접근 지정자를 지정하지 않으면 자동으로 적용되는 접근 지정자.
   - 같은 패키지에서만 접근 가능....
  - public - 공개
   - 클래스 내부와 외부 모두 접근 가능
   - 클래스에 public을 붙이면 import를 통해서 다른 패키지에서도 클래스를 불러다 
     사용할수 있다...
   - 별다른 제약이 없으면 멤버 메소드는 public으로 설정한다...
   
=================================================================================

setter
 - 멤버변수의 값을 셋팅하는 메소드
 - 매개변수명은 일반적으로 멤버변수명과 동일하게 작성한다....
   멤버변수명을 줄여쓰거나 앞에 _를 붙이기도 한다...
   
 - 일반적인 형식
 	void set멤버변수명(매개변수) { 코드정의; }

getter
 - 멤버변수의 값을 반환하는 메소드
 
 - 형식
 	반환자료형 get멤버변수명() { 코드정의;(return 멤버변수;) }



























   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   